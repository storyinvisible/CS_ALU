/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     TIME = 4hf
*/
module test_2 (
    input clk,
    input rst,
    input [23:0] counter,
    input start,
    output reg [7:0] display,
    output reg error
  );
  
  localparam TIME = 4'hf;
  
  
  wire [16-1:0] M_alu_out;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_3 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out)
  );
  
  localparam IDLE_state = 5'd0;
  localparam ADDER1_state = 5'd1;
  localparam ADDER2_state = 5'd2;
  localparam SUBSTRACT1_state = 5'd3;
  localparam SUBSTRACT2_state = 5'd4;
  localparam MULTIPLY_state = 5'd5;
  localparam AND_state = 5'd6;
  localparam OR_state = 5'd7;
  localparam XOR_state = 5'd8;
  localparam LDR_state = 5'd9;
  localparam COMPLT_state = 5'd10;
  localparam COMPLE1_state = 5'd11;
  localparam COMPLE2_state = 5'd12;
  localparam COMPEQ1_state = 5'd13;
  localparam COMPEQ2_state = 5'd14;
  localparam SHL_state = 5'd15;
  localparam SHR_state = 5'd16;
  localparam SRA_state = 5'd17;
  localparam NAND_state = 5'd18;
  localparam NOR_state = 5'd19;
  localparam XNOR_state = 5'd20;
  localparam NA_state = 5'd21;
  localparam END_state = 5'd22;
  
  reg [4:0] M_state_d, M_state_q = IDLE_state;
  
  integer expected;
  
  always @* begin
    M_state_d = M_state_q;
    
    display = 1'h0;
    error = 1'h1;
    
    case (M_state_q)
      IDLE_state: begin
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        M_alu_alufn = 1'h0;
        if (start) begin
          M_state_d = ADDER1_state;
        end
        display = 8'haa;
      end
      ADDER1_state: begin
        M_alu_a = 1'h1;
        M_alu_b = 2'h3;
        M_alu_alufn = 1'h0;
        expected = 3'h4;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = ADDER2_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 1'h1;
      end
      ADDER2_state: begin
        M_alu_a = 16'h8000;
        M_alu_b = 16'h8000;
        M_alu_alufn = 1'h0;
        expected = 1'h0;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = SUBSTRACT1_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 2'h2;
      end
      SUBSTRACT1_state: begin
        M_alu_a = 3'h7;
        M_alu_b = 2'h3;
        M_alu_alufn = 1'h1;
        expected = 3'h4;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = SUBSTRACT2_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 3'h4;
      end
      SUBSTRACT2_state: begin
        M_alu_a = 3'h6;
        M_alu_b = 3'h7;
        M_alu_alufn = 1'h1;
        expected = 16'hffff;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = MULTIPLY_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 4'h8;
      end
      MULTIPLY_state: begin
        M_alu_a = 1'h1;
        M_alu_b = 2'h3;
        M_alu_alufn = 2'h2;
        expected = 2'h3;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = AND_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 5'h10;
      end
      AND_state: begin
        M_alu_a = 5'h13;
        M_alu_b = 5'h19;
        M_alu_alufn = 5'h18;
        expected = 5'h11;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = OR_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 6'h20;
      end
      OR_state: begin
        M_alu_a = 4'h1;
        M_alu_b = 4'hc;
        M_alu_alufn = 5'h1e;
        expected = 4'hd;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = XOR_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 7'h40;
      end
      XOR_state: begin
        M_alu_a = 2'h1;
        M_alu_b = 2'h3;
        M_alu_alufn = 5'h16;
        expected = 2'h2;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = LDR_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'h80;
      end
      LDR_state: begin
        M_alu_a = 1'h1;
        M_alu_b = 2'h3;
        M_alu_alufn = 5'h1a;
        expected = 1'h1;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = COMPLT_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'h81;
      end
      COMPLT_state: begin
        M_alu_a = 1'h1;
        M_alu_b = 2'h3;
        M_alu_alufn = 6'h35;
        expected = 1'h1;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = COMPLE1_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'h82;
      end
      COMPLE1_state: begin
        M_alu_a = 1'h1;
        M_alu_b = 2'h3;
        M_alu_alufn = 6'h37;
        expected = 1'h1;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = COMPLE2_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'h84;
      end
      COMPLE2_state: begin
        M_alu_a = 2'h3;
        M_alu_b = 2'h3;
        M_alu_alufn = 6'h37;
        expected = 1'h1;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = COMPEQ1_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'h88;
      end
      COMPEQ1_state: begin
        M_alu_a = 2'h3;
        M_alu_b = 2'h3;
        M_alu_alufn = 6'h33;
        expected = 1'h1;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = COMPEQ2_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'h90;
      end
      COMPEQ2_state: begin
        M_alu_a = 2'h3;
        M_alu_b = 3'h7;
        M_alu_alufn = 6'h33;
        expected = 1'h0;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = SHL_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'ha0;
      end
      SHL_state: begin
        M_alu_a = 1'h1;
        M_alu_b = 2'h3;
        M_alu_alufn = 6'h20;
        expected = 4'h8;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = SHR_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'hc0;
      end
      SHR_state: begin
        M_alu_a = 4'h8;
        M_alu_b = 2'h3;
        M_alu_alufn = 6'h21;
        expected = 1'h1;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = SRA_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'hc1;
      end
      SRA_state: begin
        M_alu_a = 16'h8001;
        M_alu_b = 2'h3;
        M_alu_alufn = 6'h23;
        expected = 16'hf000;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = NAND_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'hc2;
      end
      NAND_state: begin
        M_alu_a = 5'h13;
        M_alu_b = 5'h19;
        M_alu_alufn = 5'h17;
        expected = 16'hffee;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = NOR_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'hc4;
      end
      NOR_state: begin
        M_alu_a = 4'h1;
        M_alu_b = 4'hc;
        M_alu_alufn = 5'h11;
        expected = 16'hfff2;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = XNOR_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'hc8;
      end
      XNOR_state: begin
        M_alu_a = 2'h1;
        M_alu_b = 2'h3;
        M_alu_alufn = 5'h19;
        expected = 16'hfffd;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = NA_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'hd0;
      end
      NA_state: begin
        M_alu_a = 1'h1;
        M_alu_b = 2'h3;
        M_alu_alufn = 5'h15;
        expected = 16'hfffe;
        if ((M_alu_out == expected) && (counter == 4'hf)) begin
          M_state_d = END_state;
        end
        if (M_alu_out != expected) begin
          error = 1'h0;
        end
        display = 8'he0;
      end
      END_state: begin
        M_alu_a = 1'h1;
        M_alu_b = 2'h3;
        M_alu_alufn = 1'h0;
        display = 8'hff;
      end
      default: begin
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        M_alu_alufn = 1'h0;
        M_state_d = IDLE_state;
        display = 8'haa;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
