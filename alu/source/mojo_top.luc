module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
    test test; // initialize the tester
    dff counter[24]; // used to slow down the test progress for human to detect the change  
    dff a[16];
    dff b[16];
    dff alufn[6];
    }  
  }
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4h0;           // select no digits
   
    test.counter = counter.q; // feed the counter to tester
    test.ma=a.q;
    test.mb=b.q;
    test.malufn=alufn.q;
    
    if (io_dip[0][0]){ // use DIP switch[0][0] to start the test
      test.start = b01; // indicates start
      case (io_dip[0][7:6]){
        b01:a.d=c{io_dip[2],io_dip[1]}; // record the first operator a from user input io_dip[2:1]
        b10:b.d=c{io_dip[2],io_dip[1]}; // record the second operator b from user input io_dip[2:1]
      }
      if (io_dip[0][5])
        alufn.d=io_dip[1][5:0]; // record alufn[5:0] from user input io_dip[1][5:0]
      if (io_dip[0][4])
        test.start=b10; // the manual mode will be unlocked by switching on io_dip[0][5] && io_dip[0][0]
      io_led[2][7:0] = test.out[15:8];
      io_led[1][7:0] = test.out[7:0];
      io_led[0][7:0] = test.display; // connect the LED to the output of tester, which indicates the current status of testing
      if (~test.error && counter.q[23] == 1) {
        io_led[2][7:0] = 8hff; // LED[2] will blink if there is error 
      }
    }
    else 
      test.start = 0; // indicates that the test is not ready for start 
      io_led[0][7:0] = test.display; // connect LED to test output  
    
    counter.d = counter.q + 1; // increment the counter        
            
  }
}